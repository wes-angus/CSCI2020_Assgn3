/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
import java.awt.Dimension;
import java.awt.FontMetrics;

/**
 *
 * @author 100449718
 */
public class BarGraph extends JPanel {

    /**
     * Creates new form BarGraph
     */
    int[] barValues;
    int yStepSize;
    
    public BarGraph(int[] values, int y_step_size)
    {
        barValues = values;
        yStepSize = y_step_size;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(1280, 720));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1078, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 631, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g)
    {
        //find longest bar to fit graph to
        int max = 1;
        for(Integer value : barValues)
        {
            max = Math.max(max, value);
        }
        
        Dimension d = getPreferredSize();
        int clientHeight = d.height;
        int clientWidth = d.width;
        
        Font labelFont = new Font("SansSerif", Font.PLAIN, 10);
        FontMetrics labelFontMetrics = g.getFontMetrics(labelFont);
        int sideOffset = labelFontMetrics.stringWidth(Integer.toString(max)) + 10;
        int otherSideOffset = 10;
        double barWidth = ((double)clientWidth - (double)sideOffset - (double)otherSideOffset) / (double)barValues.length;
        
        int topOffset = 10;
        int bottomOffset = (labelFontMetrics.getHeight());
        
        int valueX;
        int valueY;
        int height;
        int l_x;
        int l_y = clientHeight - 3;
        int labelWidth;
        
        double scale = ((double)clientHeight - (double)topOffset - (double)bottomOffset) / (double)max;
        
        for (int i = 0; i < barValues.length; i++)
        {
            valueX = (int) ((double)i * barWidth) + sideOffset;
            valueY = topOffset;
            height = (int) Math.ceil((double)barValues[i] * scale);
            valueY += (int) (((double)max - (double)barValues[i]) * scale);

            g.setColor(Color.blue);
            g.fillRect(valueX, valueY, (int)barWidth - 2, height);
            g.setColor(Color.black);
            g.drawRect(valueX, valueY, (int)barWidth - 2, height);
            
            if((i+1) % 5 == 0)
            {
                labelWidth = labelFontMetrics.stringWidth(Integer.toString(i + 1));
                l_x = (int) Math.rint((double)i * barWidth + (barWidth - (double)labelWidth) / 2.0) + sideOffset;
                g.setFont(labelFont);
                g.drawString(Integer.toString(i + 1), l_x, l_y);
            }
            
        }
        
        //get closest value to max for y plot
        int closeMax = 0;
        for (int j = max; j > 0; j--)
        {
            if(j % yStepSize == 0)
            {
                closeMax = j;
                break;
            }
        }
        
        int lines = closeMax / yStepSize;
        int linePosY;
        int s_y;
        for(int l = 1; l < lines + 1; l++)
        {
            linePosY = topOffset + (int) (((double)max - (l * yStepSize)) * scale);
            g.drawLine(sideOffset-3, linePosY, sideOffset, linePosY);
            s_y = linePosY + (int) ((double)labelFontMetrics.getAscent() / 2.0);
            g.drawString(Integer.toString(l * yStepSize), 5, s_y);
        }       
        
        //Graph outline
        g.drawRect(sideOffset, topOffset, clientWidth - sideOffset - otherSideOffset, clientHeight - topOffset - bottomOffset);
        
        //Number 0
        g.drawLine(sideOffset-3, clientHeight - bottomOffset, sideOffset, clientHeight - bottomOffset);
        int s2_y = clientHeight - bottomOffset + (int) ((double)labelFontMetrics.getAscent() / 2.0);
        g.drawString(Integer.toString(0), 5, s2_y);
        labelWidth = labelFontMetrics.stringWidth(Integer.toString(1));
        l_x = (int) Math.rint((barWidth - (double)labelWidth) / 2.0) + sideOffset;
        g.drawString(Integer.toString(1), l_x, l_y);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
